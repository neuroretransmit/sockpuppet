// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: commands.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_commands_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_commands_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/extension_set.h> // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/message.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/port_undef.inc>
#include <google/protobuf/repeated_field.h> // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_commands_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal
{
    class AnyMetadata;
} // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_commands_2eproto {
    static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField
        entries[] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField
        aux[] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable
        schema[2] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
    static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
    static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_commands_2eproto;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<>::Request* Arena::CreateMaybeMessage<::Request>(Arena*);
template<>::Response* Arena::CreateMaybeMessage<::Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum RequestType : int {
    EXIT = 0,
    RUN_COMMAND = 1,
    DOWNLOAD = 2,
    RequestType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
    RequestType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RequestType_IsValid(int value);
constexpr RequestType RequestType_MIN = EXIT;
constexpr RequestType RequestType_MAX = DOWNLOAD;
constexpr int RequestType_ARRAYSIZE = RequestType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RequestType_descriptor();
template<typename T> inline const std::string& RequestType_Name(T enum_t_value)
{
    static_assert(::std::is_same<T, RequestType>::value || ::std::is_integral<T>::value,
                  "Incorrect type passed to function RequestType_Name.");
    return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(RequestType_descriptor(), enum_t_value);
}
inline bool RequestType_Parse(const std::string& name, RequestType* value)
{
    return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RequestType>(RequestType_descriptor(), name,
                                                                          value);
}
// ===================================================================

class Request PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Request) */
{
  public:
    inline Request() : Request(nullptr){};
    virtual ~Request();

    Request(const Request& from);
    Request(Request&& from) noexcept : Request() { *this = ::std::move(from); }

    inline Request& operator=(const Request& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline Request& operator=(Request&& from) noexcept
    {
        if (GetArena() == from.GetArena()) {
            if (this != &from)
                InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() { return GetDescriptor(); }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
    {
        return GetMetadataStatic().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
    {
        return GetMetadataStatic().reflection;
    }
    static const Request& default_instance();

    static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
    static inline const Request* internal_default_instance()
    {
        return reinterpret_cast<const Request*>(&_Request_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 0;

    friend void swap(Request& a, Request& b) { a.Swap(&b); }
    inline void Swap(Request* other)
    {
        if (other == this)
            return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(Request* other)
    {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline Request* New() const final { return CreateMaybeMessage<Request>(nullptr); }

    Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final
    {
        return CreateMaybeMessage<Request>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const Request& from);
    void MergeFrom(const Request& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8*
    _InternalSerialize(::PROTOBUF_NAMESPACE_ID::uint8* target,
                       ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
    inline void SharedCtor();
    inline void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(Request* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() { return "Request"; }

  protected:
    explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);

  private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

  public:
    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_commands_2eproto);
        return ::descriptor_table_commands_2eproto.file_level_metadata[kIndexInFileMessages];
    }

  public:
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kIdFieldNumber = 2,
        kOriginFieldNumber = 3,
        kSizeFieldNumber = 4,
        kDataFieldNumber = 5,
        kTypeFieldNumber = 1,
    };
    // string id = 2;
    void clear_id();
    const std::string& id() const;
    void set_id(const std::string& value);
    void set_id(std::string&& value);
    void set_id(const char* value);
    void set_id(const char* value, size_t size);
    std::string* mutable_id();
    std::string* release_id();
    void set_allocated_id(std::string* id);
    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    std::string* unsafe_arena_release_id();
    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    void unsafe_arena_set_allocated_id(std::string* id);

  private:
    const std::string& _internal_id() const;
    void _internal_set_id(const std::string& value);
    std::string* _internal_mutable_id();

  public:
    // string origin = 3;
    void clear_origin();
    const std::string& origin() const;
    void set_origin(const std::string& value);
    void set_origin(std::string&& value);
    void set_origin(const char* value);
    void set_origin(const char* value, size_t size);
    std::string* mutable_origin();
    std::string* release_origin();
    void set_allocated_origin(std::string* origin);
    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    std::string* unsafe_arena_release_origin();
    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    void unsafe_arena_set_allocated_origin(std::string* origin);

  private:
    const std::string& _internal_origin() const;
    void _internal_set_origin(const std::string& value);
    std::string* _internal_mutable_origin();

  public:
    // string size = 4;
    void clear_size();
    const std::string& size() const;
    void set_size(const std::string& value);
    void set_size(std::string&& value);
    void set_size(const char* value);
    void set_size(const char* value, size_t size);
    std::string* mutable_size();
    std::string* release_size();
    void set_allocated_size(std::string* size);
    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    std::string* unsafe_arena_release_size();
    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    void unsafe_arena_set_allocated_size(std::string* size);

  private:
    const std::string& _internal_size() const;
    void _internal_set_size(const std::string& value);
    std::string* _internal_mutable_size();

  public:
    // string data = 5;
    void clear_data();
    const std::string& data() const;
    void set_data(const std::string& value);
    void set_data(std::string&& value);
    void set_data(const char* value);
    void set_data(const char* value, size_t size);
    std::string* mutable_data();
    std::string* release_data();
    void set_allocated_data(std::string* data);
    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    std::string* unsafe_arena_release_data();
    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    void unsafe_arena_set_allocated_data(std::string* data);

  private:
    const std::string& _internal_data() const;
    void _internal_set_data(const std::string& value);
    std::string* _internal_mutable_data();

  public:
    // .RequestType type = 1;
    void clear_type();
    ::RequestType type() const;
    void set_type(::RequestType value);

  private:
    ::RequestType _internal_type() const;
    void _internal_set_type(::RequestType value);

  public:
    // @@protoc_insertion_point(class_scope:Request)
  private:
    class _Internal;

    template<typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr origin_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_commands_2eproto;
};
// -------------------------------------------------------------------

class Response PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Response) */
{
  public:
    inline Response() : Response(nullptr){};
    virtual ~Response();

    Response(const Response& from);
    Response(Response&& from) noexcept : Response() { *this = ::std::move(from); }

    inline Response& operator=(const Response& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline Response& operator=(Response&& from) noexcept
    {
        if (GetArena() == from.GetArena()) {
            if (this != &from)
                InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() { return GetDescriptor(); }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
    {
        return GetMetadataStatic().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
    {
        return GetMetadataStatic().reflection;
    }
    static const Response& default_instance();

    static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
    static inline const Response* internal_default_instance()
    {
        return reinterpret_cast<const Response*>(&_Response_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 1;

    friend void swap(Response& a, Response& b) { a.Swap(&b); }
    inline void Swap(Response* other)
    {
        if (other == this)
            return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(Response* other)
    {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline Response* New() const final { return CreateMaybeMessage<Response>(nullptr); }

    Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final
    {
        return CreateMaybeMessage<Response>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const Response& from);
    void MergeFrom(const Response& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8*
    _InternalSerialize(::PROTOBUF_NAMESPACE_ID::uint8* target,
                       ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
    inline void SharedCtor();
    inline void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(Response* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() { return "Response"; }

  protected:
    explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);

  private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

  public:
    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_commands_2eproto);
        return ::descriptor_table_commands_2eproto.file_level_metadata[kIndexInFileMessages];
    }

  public:
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kIdFieldNumber = 1,
        kOriginFieldNumber = 2,
        kSizeFieldNumber = 3,
        kOutputFieldNumber = 5,
        kCodeFieldNumber = 4,
    };
    // string id = 1;
    void clear_id();
    const std::string& id() const;
    void set_id(const std::string& value);
    void set_id(std::string&& value);
    void set_id(const char* value);
    void set_id(const char* value, size_t size);
    std::string* mutable_id();
    std::string* release_id();
    void set_allocated_id(std::string* id);
    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    std::string* unsafe_arena_release_id();
    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    void unsafe_arena_set_allocated_id(std::string* id);

  private:
    const std::string& _internal_id() const;
    void _internal_set_id(const std::string& value);
    std::string* _internal_mutable_id();

  public:
    // string origin = 2;
    void clear_origin();
    const std::string& origin() const;
    void set_origin(const std::string& value);
    void set_origin(std::string&& value);
    void set_origin(const char* value);
    void set_origin(const char* value, size_t size);
    std::string* mutable_origin();
    std::string* release_origin();
    void set_allocated_origin(std::string* origin);
    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    std::string* unsafe_arena_release_origin();
    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    void unsafe_arena_set_allocated_origin(std::string* origin);

  private:
    const std::string& _internal_origin() const;
    void _internal_set_origin(const std::string& value);
    std::string* _internal_mutable_origin();

  public:
    // string size = 3;
    void clear_size();
    const std::string& size() const;
    void set_size(const std::string& value);
    void set_size(std::string&& value);
    void set_size(const char* value);
    void set_size(const char* value, size_t size);
    std::string* mutable_size();
    std::string* release_size();
    void set_allocated_size(std::string* size);
    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    std::string* unsafe_arena_release_size();
    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    void unsafe_arena_set_allocated_size(std::string* size);

  private:
    const std::string& _internal_size() const;
    void _internal_set_size(const std::string& value);
    std::string* _internal_mutable_size();

  public:
    // string output = 5;
    void clear_output();
    const std::string& output() const;
    void set_output(const std::string& value);
    void set_output(std::string&& value);
    void set_output(const char* value);
    void set_output(const char* value, size_t size);
    std::string* mutable_output();
    std::string* release_output();
    void set_allocated_output(std::string* output);
    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    std::string* unsafe_arena_release_output();
    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    void unsafe_arena_set_allocated_output(std::string* output);

  private:
    const std::string& _internal_output() const;
    void _internal_set_output(const std::string& value);
    std::string* _internal_mutable_output();

  public:
    // int32 code = 4;
    void clear_code();
    ::PROTOBUF_NAMESPACE_ID::int32 code() const;
    void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);

  private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
    void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);

  public:
    // @@protoc_insertion_point(class_scope:Response)
  private:
    class _Internal;

    template<typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr origin_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_;
    ::PROTOBUF_NAMESPACE_ID::int32 code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_commands_2eproto;
};
// ===================================================================

// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif // __GNUC__
// Request

// .RequestType type = 1;
inline void Request::clear_type() { type_ = 0; }
inline ::RequestType Request::_internal_type() const { return static_cast<::RequestType>(type_); }
inline ::RequestType Request::type() const
{
    // @@protoc_insertion_point(field_get:Request.type)
    return _internal_type();
}
inline void Request::_internal_set_type(::RequestType value) { type_ = value; }
inline void Request::set_type(::RequestType value)
{
    _internal_set_type(value);
    // @@protoc_insertion_point(field_set:Request.type)
}

// string id = 2;
inline void Request::clear_id()
{
    id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Request::id() const
{
    // @@protoc_insertion_point(field_get:Request.id)
    return _internal_id();
}
inline void Request::set_id(const std::string& value)
{
    _internal_set_id(value);
    // @@protoc_insertion_point(field_set:Request.id)
}
inline std::string* Request::mutable_id()
{
    // @@protoc_insertion_point(field_mutable:Request.id)
    return _internal_mutable_id();
}
inline const std::string& Request::_internal_id() const { return id_.Get(); }
inline void Request::_internal_set_id(const std::string& value)
{

    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Request::set_id(std::string&& value)
{

    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value),
            GetArena());
    // @@protoc_insertion_point(field_set_rvalue:Request.id)
}
inline void Request::set_id(const char* value)
{
    GOOGLE_DCHECK(value != nullptr);

    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
            GetArena());
    // @@protoc_insertion_point(field_set_char:Request.id)
}
inline void Request::set_id(const char* value, size_t size)
{

    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
    // @@protoc_insertion_point(field_set_pointer:Request.id)
}
inline std::string* Request::_internal_mutable_id()
{

    return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Request::release_id()
{
    // @@protoc_insertion_point(field_release:Request.id)
    return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request::set_allocated_id(std::string* id)
{
    if (id != nullptr) {

    } else {
    }
    id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id, GetArena());
    // @@protoc_insertion_point(field_set_allocated:Request.id)
}
inline std::string* Request::unsafe_arena_release_id()
{
    // @@protoc_insertion_point(field_unsafe_arena_release:Request.id)
    GOOGLE_DCHECK(GetArena() != nullptr);

    return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                  GetArena());
}
inline void Request::unsafe_arena_set_allocated_id(std::string* id)
{
    GOOGLE_DCHECK(GetArena() != nullptr);
    if (id != nullptr) {

    } else {
    }
    id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
                                GetArena());
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Request.id)
}

// string origin = 3;
inline void Request::clear_origin()
{
    origin_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Request::origin() const
{
    // @@protoc_insertion_point(field_get:Request.origin)
    return _internal_origin();
}
inline void Request::set_origin(const std::string& value)
{
    _internal_set_origin(value);
    // @@protoc_insertion_point(field_set:Request.origin)
}
inline std::string* Request::mutable_origin()
{
    // @@protoc_insertion_point(field_mutable:Request.origin)
    return _internal_mutable_origin();
}
inline const std::string& Request::_internal_origin() const { return origin_.Get(); }
inline void Request::_internal_set_origin(const std::string& value)
{

    origin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Request::set_origin(std::string&& value)
{

    origin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value),
                GetArena());
    // @@protoc_insertion_point(field_set_rvalue:Request.origin)
}
inline void Request::set_origin(const char* value)
{
    GOOGLE_DCHECK(value != nullptr);

    origin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
                GetArena());
    // @@protoc_insertion_point(field_set_char:Request.origin)
}
inline void Request::set_origin(const char* value, size_t size)
{

    origin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
    // @@protoc_insertion_point(field_set_pointer:Request.origin)
}
inline std::string* Request::_internal_mutable_origin()
{

    return origin_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Request::release_origin()
{
    // @@protoc_insertion_point(field_release:Request.origin)
    return origin_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request::set_allocated_origin(std::string* origin)
{
    if (origin != nullptr) {

    } else {
    }
    origin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), origin,
                         GetArena());
    // @@protoc_insertion_point(field_set_allocated:Request.origin)
}
inline std::string* Request::unsafe_arena_release_origin()
{
    // @@protoc_insertion_point(field_unsafe_arena_release:Request.origin)
    GOOGLE_DCHECK(GetArena() != nullptr);

    return origin_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                      GetArena());
}
inline void Request::unsafe_arena_set_allocated_origin(std::string* origin)
{
    GOOGLE_DCHECK(GetArena() != nullptr);
    if (origin != nullptr) {

    } else {
    }
    origin_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), origin,
                                    GetArena());
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Request.origin)
}

// string size = 4;
inline void Request::clear_size()
{
    size_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Request::size() const
{
    // @@protoc_insertion_point(field_get:Request.size)
    return _internal_size();
}
inline void Request::set_size(const std::string& value)
{
    _internal_set_size(value);
    // @@protoc_insertion_point(field_set:Request.size)
}
inline std::string* Request::mutable_size()
{
    // @@protoc_insertion_point(field_mutable:Request.size)
    return _internal_mutable_size();
}
inline const std::string& Request::_internal_size() const { return size_.Get(); }
inline void Request::_internal_set_size(const std::string& value)
{

    size_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Request::set_size(std::string&& value)
{

    size_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value),
              GetArena());
    // @@protoc_insertion_point(field_set_rvalue:Request.size)
}
inline void Request::set_size(const char* value)
{
    GOOGLE_DCHECK(value != nullptr);

    size_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
    // @@protoc_insertion_point(field_set_char:Request.size)
}
inline void Request::set_size(const char* value, size_t size)
{

    size_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
              ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
    // @@protoc_insertion_point(field_set_pointer:Request.size)
}
inline std::string* Request::_internal_mutable_size()
{

    return size_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Request::release_size()
{
    // @@protoc_insertion_point(field_release:Request.size)
    return size_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request::set_allocated_size(std::string* size)
{
    if (size != nullptr) {

    } else {
    }
    size_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), size, GetArena());
    // @@protoc_insertion_point(field_set_allocated:Request.size)
}
inline std::string* Request::unsafe_arena_release_size()
{
    // @@protoc_insertion_point(field_unsafe_arena_release:Request.size)
    GOOGLE_DCHECK(GetArena() != nullptr);

    return size_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                    GetArena());
}
inline void Request::unsafe_arena_set_allocated_size(std::string* size)
{
    GOOGLE_DCHECK(GetArena() != nullptr);
    if (size != nullptr) {

    } else {
    }
    size_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), size,
                                  GetArena());
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Request.size)
}

// string data = 5;
inline void Request::clear_data()
{
    data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Request::data() const
{
    // @@protoc_insertion_point(field_get:Request.data)
    return _internal_data();
}
inline void Request::set_data(const std::string& value)
{
    _internal_set_data(value);
    // @@protoc_insertion_point(field_set:Request.data)
}
inline std::string* Request::mutable_data()
{
    // @@protoc_insertion_point(field_mutable:Request.data)
    return _internal_mutable_data();
}
inline const std::string& Request::_internal_data() const { return data_.Get(); }
inline void Request::_internal_set_data(const std::string& value)
{

    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Request::set_data(std::string&& value)
{

    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value),
              GetArena());
    // @@protoc_insertion_point(field_set_rvalue:Request.data)
}
inline void Request::set_data(const char* value)
{
    GOOGLE_DCHECK(value != nullptr);

    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
    // @@protoc_insertion_point(field_set_char:Request.data)
}
inline void Request::set_data(const char* value, size_t size)
{

    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
              ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
    // @@protoc_insertion_point(field_set_pointer:Request.data)
}
inline std::string* Request::_internal_mutable_data()
{

    return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Request::release_data()
{
    // @@protoc_insertion_point(field_release:Request.data)
    return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request::set_allocated_data(std::string* data)
{
    if (data != nullptr) {

    } else {
    }
    data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data, GetArena());
    // @@protoc_insertion_point(field_set_allocated:Request.data)
}
inline std::string* Request::unsafe_arena_release_data()
{
    // @@protoc_insertion_point(field_unsafe_arena_release:Request.data)
    GOOGLE_DCHECK(GetArena() != nullptr);

    return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                    GetArena());
}
inline void Request::unsafe_arena_set_allocated_data(std::string* data)
{
    GOOGLE_DCHECK(GetArena() != nullptr);
    if (data != nullptr) {

    } else {
    }
    data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
                                  GetArena());
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Request.data)
}

// -------------------------------------------------------------------

// Response

// string id = 1;
inline void Response::clear_id()
{
    id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Response::id() const
{
    // @@protoc_insertion_point(field_get:Response.id)
    return _internal_id();
}
inline void Response::set_id(const std::string& value)
{
    _internal_set_id(value);
    // @@protoc_insertion_point(field_set:Response.id)
}
inline std::string* Response::mutable_id()
{
    // @@protoc_insertion_point(field_mutable:Response.id)
    return _internal_mutable_id();
}
inline const std::string& Response::_internal_id() const { return id_.Get(); }
inline void Response::_internal_set_id(const std::string& value)
{

    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Response::set_id(std::string&& value)
{

    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value),
            GetArena());
    // @@protoc_insertion_point(field_set_rvalue:Response.id)
}
inline void Response::set_id(const char* value)
{
    GOOGLE_DCHECK(value != nullptr);

    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
            GetArena());
    // @@protoc_insertion_point(field_set_char:Response.id)
}
inline void Response::set_id(const char* value, size_t size)
{

    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
    // @@protoc_insertion_point(field_set_pointer:Response.id)
}
inline std::string* Response::_internal_mutable_id()
{

    return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Response::release_id()
{
    // @@protoc_insertion_point(field_release:Response.id)
    return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Response::set_allocated_id(std::string* id)
{
    if (id != nullptr) {

    } else {
    }
    id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id, GetArena());
    // @@protoc_insertion_point(field_set_allocated:Response.id)
}
inline std::string* Response::unsafe_arena_release_id()
{
    // @@protoc_insertion_point(field_unsafe_arena_release:Response.id)
    GOOGLE_DCHECK(GetArena() != nullptr);

    return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                  GetArena());
}
inline void Response::unsafe_arena_set_allocated_id(std::string* id)
{
    GOOGLE_DCHECK(GetArena() != nullptr);
    if (id != nullptr) {

    } else {
    }
    id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
                                GetArena());
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Response.id)
}

// string origin = 2;
inline void Response::clear_origin()
{
    origin_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Response::origin() const
{
    // @@protoc_insertion_point(field_get:Response.origin)
    return _internal_origin();
}
inline void Response::set_origin(const std::string& value)
{
    _internal_set_origin(value);
    // @@protoc_insertion_point(field_set:Response.origin)
}
inline std::string* Response::mutable_origin()
{
    // @@protoc_insertion_point(field_mutable:Response.origin)
    return _internal_mutable_origin();
}
inline const std::string& Response::_internal_origin() const { return origin_.Get(); }
inline void Response::_internal_set_origin(const std::string& value)
{

    origin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Response::set_origin(std::string&& value)
{

    origin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value),
                GetArena());
    // @@protoc_insertion_point(field_set_rvalue:Response.origin)
}
inline void Response::set_origin(const char* value)
{
    GOOGLE_DCHECK(value != nullptr);

    origin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
                GetArena());
    // @@protoc_insertion_point(field_set_char:Response.origin)
}
inline void Response::set_origin(const char* value, size_t size)
{

    origin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
    // @@protoc_insertion_point(field_set_pointer:Response.origin)
}
inline std::string* Response::_internal_mutable_origin()
{

    return origin_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Response::release_origin()
{
    // @@protoc_insertion_point(field_release:Response.origin)
    return origin_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Response::set_allocated_origin(std::string* origin)
{
    if (origin != nullptr) {

    } else {
    }
    origin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), origin,
                         GetArena());
    // @@protoc_insertion_point(field_set_allocated:Response.origin)
}
inline std::string* Response::unsafe_arena_release_origin()
{
    // @@protoc_insertion_point(field_unsafe_arena_release:Response.origin)
    GOOGLE_DCHECK(GetArena() != nullptr);

    return origin_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                      GetArena());
}
inline void Response::unsafe_arena_set_allocated_origin(std::string* origin)
{
    GOOGLE_DCHECK(GetArena() != nullptr);
    if (origin != nullptr) {

    } else {
    }
    origin_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), origin,
                                    GetArena());
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Response.origin)
}

// string size = 3;
inline void Response::clear_size()
{
    size_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Response::size() const
{
    // @@protoc_insertion_point(field_get:Response.size)
    return _internal_size();
}
inline void Response::set_size(const std::string& value)
{
    _internal_set_size(value);
    // @@protoc_insertion_point(field_set:Response.size)
}
inline std::string* Response::mutable_size()
{
    // @@protoc_insertion_point(field_mutable:Response.size)
    return _internal_mutable_size();
}
inline const std::string& Response::_internal_size() const { return size_.Get(); }
inline void Response::_internal_set_size(const std::string& value)
{

    size_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Response::set_size(std::string&& value)
{

    size_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value),
              GetArena());
    // @@protoc_insertion_point(field_set_rvalue:Response.size)
}
inline void Response::set_size(const char* value)
{
    GOOGLE_DCHECK(value != nullptr);

    size_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
    // @@protoc_insertion_point(field_set_char:Response.size)
}
inline void Response::set_size(const char* value, size_t size)
{

    size_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
              ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
    // @@protoc_insertion_point(field_set_pointer:Response.size)
}
inline std::string* Response::_internal_mutable_size()
{

    return size_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Response::release_size()
{
    // @@protoc_insertion_point(field_release:Response.size)
    return size_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Response::set_allocated_size(std::string* size)
{
    if (size != nullptr) {

    } else {
    }
    size_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), size, GetArena());
    // @@protoc_insertion_point(field_set_allocated:Response.size)
}
inline std::string* Response::unsafe_arena_release_size()
{
    // @@protoc_insertion_point(field_unsafe_arena_release:Response.size)
    GOOGLE_DCHECK(GetArena() != nullptr);

    return size_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                    GetArena());
}
inline void Response::unsafe_arena_set_allocated_size(std::string* size)
{
    GOOGLE_DCHECK(GetArena() != nullptr);
    if (size != nullptr) {

    } else {
    }
    size_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), size,
                                  GetArena());
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Response.size)
}

// int32 code = 4;
inline void Response::clear_code() { code_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32 Response::_internal_code() const { return code_; }
inline ::PROTOBUF_NAMESPACE_ID::int32 Response::code() const
{
    // @@protoc_insertion_point(field_get:Response.code)
    return _internal_code();
}
inline void Response::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) { code_ = value; }
inline void Response::set_code(::PROTOBUF_NAMESPACE_ID::int32 value)
{
    _internal_set_code(value);
    // @@protoc_insertion_point(field_set:Response.code)
}

// string output = 5;
inline void Response::clear_output()
{
    output_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Response::output() const
{
    // @@protoc_insertion_point(field_get:Response.output)
    return _internal_output();
}
inline void Response::set_output(const std::string& value)
{
    _internal_set_output(value);
    // @@protoc_insertion_point(field_set:Response.output)
}
inline std::string* Response::mutable_output()
{
    // @@protoc_insertion_point(field_mutable:Response.output)
    return _internal_mutable_output();
}
inline const std::string& Response::_internal_output() const { return output_.Get(); }
inline void Response::_internal_set_output(const std::string& value)
{

    output_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Response::set_output(std::string&& value)
{

    output_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value),
                GetArena());
    // @@protoc_insertion_point(field_set_rvalue:Response.output)
}
inline void Response::set_output(const char* value)
{
    GOOGLE_DCHECK(value != nullptr);

    output_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
                GetArena());
    // @@protoc_insertion_point(field_set_char:Response.output)
}
inline void Response::set_output(const char* value, size_t size)
{

    output_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
    // @@protoc_insertion_point(field_set_pointer:Response.output)
}
inline std::string* Response::_internal_mutable_output()
{

    return output_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Response::release_output()
{
    // @@protoc_insertion_point(field_release:Response.output)
    return output_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Response::set_allocated_output(std::string* output)
{
    if (output != nullptr) {

    } else {
    }
    output_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output,
                         GetArena());
    // @@protoc_insertion_point(field_set_allocated:Response.output)
}
inline std::string* Response::unsafe_arena_release_output()
{
    // @@protoc_insertion_point(field_unsafe_arena_release:Response.output)
    GOOGLE_DCHECK(GetArena() != nullptr);

    return output_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                      GetArena());
}
inline void Response::unsafe_arena_set_allocated_output(std::string* output)
{
    GOOGLE_DCHECK(GetArena() != nullptr);
    if (output != nullptr) {

    } else {
    }
    output_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output,
                                    GetArena());
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Response.output)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif // __GNUC__
// -------------------------------------------------------------------

// @@protoc_insertion_point(namespace_scope)

PROTOBUF_NAMESPACE_OPEN

template<> struct is_proto_enum<::RequestType> : ::std::true_type {
};
template<> inline const EnumDescriptor* GetEnumDescriptor<::RequestType>()
{
    return ::RequestType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_commands_2eproto
